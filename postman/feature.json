{
	"info": {
		"_postman_id": "005e7d0e-ea44-414b-80d4-a1ceafa5aa2a",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23280086",
		"_collection_link": "https://planetary-escape-560323.postman.co/workspace/1d1661f1-fcbb-4740-82f5-b894872b5ed6/collection/23280086-005e7d0e-ea44-414b-80d4-a1ceafa5aa2a?action=share&source=collection_link&creator=23280086"
	},
	"item": [
		{
			"name": "Validation",
			"item": [
				{
					"name": "Создание комментария: текст комментария < 10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"commentText\":\"word56789\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария: текст комментария > 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"commentText\":\"word56789\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария: без поля commentText",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CommentCreate",
			"item": [
				{
					"name": "Создание комментария к 1 событию: данные валидны",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"commentText\":\"Rennersddf \"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "132"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "409 conflict",
			"item": [
				{
					"name": "Создание повторного комментария к 1 событию пользователем 132 текст идентичный изначально отправленному",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Подборка должны содержать поля: message, reason, status, timestamp\", function () {\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('reason');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Текст ошибки соотвествует ожидаемому\", function () {\r",
									"    pm.expect(\"Вы пытаетесь добавить повторный комментарий\").equal(target.message, 'Сообщение не содержит соотвествующее сообщение об ошибке');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные полученные в ответе должны содержать значения соответствующего типа\", function () {\r",
									"    pm.expect(target.message).to.not.be.null;\r",
									"    pm.expect(target.reason).to.not.be.null;\r",
									"    pm.expect(target.status).to.not.be.null;\r",
									"    pm.expect(target.timestamp).to.not.be.null;\r",
									"    pm.expect(target.message).to.be.a(\"string\");\r",
									"    pm.expect(target.status).to.be.an(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"commentText\":\"Rennersddf \"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "132"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Not Found",
			"item": [
				{
					"name": "Запрашиваемый комментарий отсутствует",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Подборка должны содержать поля: message, reason, status, timestamp\", function () {\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('reason');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать ожидаемым\", function () {\r",
									"    pm.expect(target.message).to.not.be.null;\r",
									"    pm.expect(target.reason).to.not.be.null;\r",
									"    pm.expect(target.status).to.not.be.null;\r",
									"    pm.expect(target.timestamp).to.not.be.null;\r",
									"    pm.expect(target.message).to.be.a(\"string\");\r",
									"    pm.expect(target.status).to.be.an(\"string\");\r",
									"\r",
									"    pm.expect(\"Комментарий с id = 2 не найден\").equal(target.message, 'Сообщение об ошибке должно соответствовать Комментарий с id = 2 не найден');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/comments/:commentId?from=0&size=4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								":commentId"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "4"
								}
							],
							"variable": [
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comment: CRUD",
			"item": [
				{
					"name": "Создание комментария: к 1 событию длина комментария = 10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, commentText, createdOn, editedOn\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('commentText');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('editedOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(\"1234567890\").equal(target.commentText, 'Текст комментария должен совпадать с отправленным');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"commentText\":\"1234567890\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария к 12 событию: длина комментария = 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, commentText, createdOn, editedOn\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('commentText');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('editedOn');\r",
									"});\r",
									"``\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.commentText).equal(target.commentText, 'Текст комментария должен совпадать с отправленным');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"commentText\":\"word567890 word567890 word567890 word567890 word567890 word567890 word567890 word567890 word567890 word567890 word567890 word567890 word567890 word567890 word567890 word567890 word567890 word567890 wo\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "131"
								},
								{
									"key": "eventId",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "По 1 событию оставлено два комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, commentText, createdOn, editedOn\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('commentText');\r",
									"pm.expect(target[0]).to.have.property('createdOn');\r",
									"pm.expect(target[0]).to.have.property('editedOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать два комментария\", function () {\r",
									"pm.expect(Array.isArray(target)).equal(true, 'Ответ не является массивом объектов');\r",
									"pm.expect(Object.keys(target).length).equal(2, 'Количество комментариев не сооответствует действительному количеству');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/comments/event/:eventId?from=0&size=4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"event",
								":eventId"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "4"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить список комментариев пользователя 132",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, commentText, createdOn, editedOn\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('commentText');\r",
									"pm.expect(target[0]).to.have.property('createdOn');\r",
									"pm.expect(target[0]).to.have.property('editedOn');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ответ должен содержать один комментарий пользователя\", function () {\r",
									"pm.expect(Array.isArray(target)).equal(true, 'Ответ не является массивом объектов');\r",
									"pm.expect(Object.keys(target).length).equal(1, 'Количество комментариев не сооответствует действительному количеству');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/comments/user/:userId?from=&size=",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"user",
								":userId"
							],
							"query": [
								{
									"key": "from",
									"value": ""
								},
								{
									"key": "size",
									"value": ""
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "132"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание 2 комментария 132 пользователем",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, commentText, createdOn, editedOn\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('commentText');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('editedOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(\"1234567890\").equal(target.commentText, 'Текст комментария должен совпадать с отправленным');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"commentText\":\"1234567890\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "132"
								},
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить список комментариев пользователя 132 после создания еще одного комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, commentText, createdOn, editedOn\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('commentText');\r",
									"pm.expect(target[0]).to.have.property('createdOn');\r",
									"pm.expect(target[0]).to.have.property('editedOn');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ответ должен содержать один комментарий пользователя\", function () {\r",
									"pm.expect(Array.isArray(target)).equal(true, 'Ответ не является массивом объектов');\r",
									"pm.expect(Object.keys(target).length).equal(2, 'Количество комментариев не сооответствует действительному количеству');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/comments/user/:userId?from=&size=",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"user",
								":userId"
							],
							"query": [
								{
									"key": "from",
									"value": ""
								},
								{
									"key": "size",
									"value": ""
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "132"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария к 1 событию 132 пользователем",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, commentText, createdOn, editedOn\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('commentText');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('editedOn');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(\"Update commentText\").equal(target.commentText, 'Текст комментария должен совпадать с отправленным');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \"id\": \"1\",\r\n    \"commentText\":\"Update commentText\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "132"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ошибка обновления комментария: принадлежит другому пользователю",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Подборка должны содержать поля: message, reason, status, timestamp\", function () {\r",
									"pm.expect(target).to.have.property('message');\r",
									"pm.expect(target).to.have.property('reason');\r",
									"pm.expect(target).to.have.property('status');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Ошибка обновления комментария: принадлежит другому пользователю\", function () {\r",
									"    pm.expect(\"Ошибка обновления комментария: принадлежит другому пользователю\").equal(target.message, 'Сообщение не содержит соотвествующее сообщение об ошибке');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \"id\": \"1\",\r\n    \"commentText\":\"Update commentText\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария с id = 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить список комментариев пользователя 132 после удаления Администратором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, commentText, createdOn, editedOn\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('commentText');\r",
									"pm.expect(target[0]).to.have.property('createdOn');\r",
									"pm.expect(target[0]).to.have.property('editedOn');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ответ должен содержать один комментарий пользователя\", function () {\r",
									"pm.expect(Array.isArray(target)).equal(true, 'Ответ не является массивом объектов');\r",
									"pm.expect(Object.keys(target).length).equal(1, 'Количество комментариев не сооответствует действительному количеству');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/comments/user/:userId?from=&size=",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"user",
								":userId"
							],
							"query": [
								{
									"key": "from",
									"value": ""
								},
								{
									"key": "size",
									"value": ""
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "132"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария с id = 4 к 1 событию 132 пользователем после удаления Администратором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \"id\": \"4\",\r\n    \"commentText\":\"Update commentText\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "132"
								},
								{
									"key": "eventId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}